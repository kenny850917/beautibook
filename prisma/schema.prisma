// BeautiBook MVP Schema
// Beauty salon booking system with 5-minute hold system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STAFF
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// User authentication and roles
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password_hash String
  role          UserRole
  created_at    DateTime @default(now())

  // Relations
  staff    Staff?
  accounts Account[]
  sessions Session[]

  @@map("users")
}

// NextAuth.js required models for database sessions
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Staff member information
model Staff {
  id         String   @id @default(cuid())
  user_id    String   @unique
  name       String
  bio        String?
  photo_url  String?
  services   String[] // Array of service IDs they can perform
  created_at DateTime @default(now())

  // Relations
  user                User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  staffServicePricing StaffServicePricing[]
  staffAvailability   StaffAvailability[]
  bookingHolds        BookingHold[]
  bookings            Booking[]
  holdAnalytics       HoldAnalytics[]

  @@map("staff")
}

// Available services (Haircut, Hair Color, Highlights)
model Service {
  id               String @id @default(cuid())
  name             String @unique
  duration_minutes Int
  base_price       Int    // Price in cents
  created_at       DateTime @default(now())

  // Relations
  staffServicePricing StaffServicePricing[]
  bookingHolds        BookingHold[]
  bookings            Booking[]
  holdAnalytics       HoldAnalytics[]

  @@map("services")
}

// Staff-specific pricing overrides
model StaffServicePricing {
  id           String @id @default(cuid())
  staff_id     String
  service_id   String
  custom_price Int    // Price in cents

  // Relations
  staff   Staff   @relation(fields: [staff_id], references: [id], onDelete: Cascade)
  service Service @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@unique([staff_id, service_id])
  @@map("staff_service_pricing")
}

// Staff availability schedules
model StaffAvailability {
  id            String     @id @default(cuid())
  staff_id      String
  day_of_week   DayOfWeek
  start_time    String     // Format: "09:00"
  end_time      String     // Format: "18:00"
  override_date DateTime?  // For specific date overrides (time off)

  // Relations
  staff Staff @relation(fields: [staff_id], references: [id], onDelete: Cascade)

  @@map("staff_availability")
}

// 5-minute booking holds system
model BookingHold {
  id            String   @id @default(cuid())
  session_id    String   // Browser session identifier
  staff_id      String
  service_id    String
  slot_datetime DateTime // UTC timestamp for the booking slot
  expires_at    DateTime // When the hold expires (5 minutes)
  created_at    DateTime @default(now())

  // Relations
  staff   Staff   @relation(fields: [staff_id], references: [id], onDelete: Cascade)
  service Service @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@unique([staff_id, slot_datetime]) // Prevent multiple holds on same slot
  @@map("booking_holds")
}

// Guest customer tracking for CRM
model Customer {
  id                 String    @id @default(cuid())
  name               String
  phone              String    @unique // Primary identifier for guests
  email              String?   @unique // Optional email
  total_bookings     Int       @default(0)
  total_spent        Int       @default(0) // In cents
  last_booking_at    DateTime?
  preferred_staff    String?   // Most frequent staff member ID
  preferred_service  String?   // Most frequent service ID
  marketing_consent  Boolean   @default(false)
  referral_source    String?   // How they found us
  notes              String?   // Staff notes about customer
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  // Relations
  bookings Booking[]

  @@map("customers")
}

// Confirmed bookings
model Booking {
  id              String   @id @default(cuid())
  staff_id        String
  service_id      String
  slot_datetime   DateTime // UTC timestamp for the booking
  customer_name   String
  customer_phone  String
  customer_id     String?  // Link to Customer record for CRM
  customer_email  String?  // For email confirmations
  final_price     Int      // Price in cents at time of booking
  created_at      DateTime @default(now())

  // Relations
  staff    Staff     @relation(fields: [staff_id], references: [id], onDelete: Cascade)
  service  Service   @relation(fields: [service_id], references: [id], onDelete: Cascade)
  customer Customer? @relation(fields: [customer_id], references: [id], onDelete: SetNull)

  @@unique([staff_id, slot_datetime]) // Prevent double booking
  @@map("bookings")
}

// Analytics for hold conversion tracking
model HoldAnalytics {
  id         String    @id @default(cuid())
  session_id String    // Browser session that created the hold
  service_id String
  staff_id   String
  held_at    DateTime  // When hold was created
  expired_at DateTime? // When hold expired (if not converted)
  converted  Boolean   @default(false) // Whether hold became a booking

  // Relations
  staff   Staff   @relation(fields: [staff_id], references: [id], onDelete: Cascade)
  service Service @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@map("hold_analytics")
}